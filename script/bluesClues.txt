// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © thesuperdave
// credit to © MichelT for VWAP

//@version=5
indicator(title="Blue's Clues", shorttitle="Blue's Clues", overlay=true)

// SETTINGS -----------------------------
ema = "EMA"
bb1 = "BBands HTF"
bb2 = "BB Toggle"
bb3 = "BBands LTF"
vwap = "VWAP"
dwmLevels = "D/W/M Levels"
displaySet = display.all - display.price_scale - display.status_line
groupEma = "20/50/200 EMA"
groupBb = "BBands - 2 Std. Deviation"
groupVwap = "Auto Anchored D/W/M VWAP"
ttBb = "Shows BBands on LTF"
groupDwmLevels = "D/W/M Levels"
groupCog = "+/- COG Alerts"

displayLtf = timeframe.isintraday and timeframe.multiplier <= 60
displayHtf = timeframe.isdwm
displayVwapD = timeframe.period == "D"
displayVwapLtf = displayLtf

emaColor1 = color.new(color.aqua, 50)
emaColor2 = color.new(color.blue, 50)
emaColor3 = color.new(color.purple, 50)
dVwapColor = color.new(color.gray, 60)
wVwapColor = color.new(color.yellow, 60)
mVwapColor = color.new(color.orange, 60)
yVwapColor = color.new(color.purple, 60)
dLevelColor = color.new(#4dd0e1, 40)
wLevelColor = color.new(color.yellow, 40)
mLevelColor = color.new(color.orange, 40)
bbColor = color.new(color.gray, 50)

// CONDITIONS ----------------------------
src = close
outLtf = ta.ema(src, 20)
outMtf = ta.ema(src, 50)
outHtf = ta.ema(src, 200)
dev = 2.0 * ta.stdev(close, 20)

upperHtf = outLtf + dev
lowerHtf = outLtf - dev
upperLtf = outLtf + dev
lowerLtf = outLtf - dev

shortBbandEntryHtf = close > upperHtf
longBbandEntryHtf = close < lowerHtf

MILLIS_IN_DAY = 86400000
dwmBarTime = timeframe.isdwm ? time : time("D")

dBlank   = "\n‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏"
wBlank   = "\n‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏"
mBlank   = "‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏   ‏"

[_dH, _dL, _dC] = request.security(syminfo.tickerid, "D", [high[1], low[1], close[1]],  barmerge.gaps_off, barmerge.lookahead_on)
[_wH, _wL, _wC] = request.security(syminfo.tickerid, "W", [high[1], low[1], close[1]],  barmerge.gaps_off, barmerge.lookahead_on)
[_mH, _mL, _mC] = request.security(syminfo.tickerid, "M", [high[1], low[1], close[1]],  barmerge.gaps_off, barmerge.lookahead_on)

isBearishTrend = outLtf < outMtf
isBullishTrend = not isBearishTrend

// INPUTS --------------------------------

ltfColor = input(defval = emaColor1, title="20 EMA", inline = ema, group = groupEma)
mtfColor = input(defval = emaColor2, title="50 EMA", inline = ema, group = groupEma)
htfColor = input(defval = emaColor3, title="200 EMA", inline = ema, group = groupEma)

upperHtfColor = input(defval = bbColor, title="Upper HTF Band", inline = bb1, group = groupBb)
lowerHtfColor = input(defval = bbColor, title="Lower HTF Band", inline = bb1, group = groupBb)
showBbLtf = input.bool(defval = false, title = "Show BB on LTF", inline = bb2, group = groupBb)
upperLtfColor = input(defval = bbColor, title="Upper LTF Band", inline = bb3, group = groupBb)
lowerLtfColor = input(defval = bbColor, title="Lower LTF Band", inline = bb3, group = groupBb)

dvColor = input(defval = dVwapColor, title="D VWAP Color", inline = vwap, group = groupVwap)
wvColor = input(defval = wVwapColor, title="W VWAP Color", inline = vwap, group = groupVwap)
mvColor = input(defval = mVwapColor, title="M VWAP Color", inline = vwap, group = groupVwap)
yvColor = input(defval = yVwapColor, title="Y VWAP Color", inline = vwap, group = groupVwap)

d_Line_Color    = input.color(defval = dLevelColor, title = "Daily Level", inline = dwmLevels, group = groupDwmLevels)
w_Line_Color    = input.color(defval = wLevelColor, title = "Weekly Level",  inline = dwmLevels, group = groupDwmLevels)
m_Line_Color    = input.color(defval = mLevelColor, title = "Monthly Level", inline = dwmLevels, group = groupDwmLevels)
extendLines     = input.bool(defval = false, title = "Extend Levels Across Screen?", inline = dwmLevels, group = groupDwmLevels)
showDwmClose    = input.bool(defval = false, title = "Show Close?", inline = dwmLevels)
dwmLineWidth    = input.int(defval = 2, title = "Levels Line Width", minval = 1, maxval = 4, step = 1, group = groupDwmLevels)

// EMAs -----------------------------
plot(outLtf, title="EMA-20", color = ltfColor, offset = 0, linewidth = 2, display = displaySet)
plot(displayLtf ? outMtf : na, title="EMA-50", color = mtfColor, offset = 0, linewidth = 2, display = displaySet)
plot(displayHtf ? outHtf : na, title="EMA-200", color = htfColor, offset = 0, linewidth = 2, display = displaySet)

// B BANDS --------------------------

p1Htf = plot(displayHtf ? upperHtf : na, "Upper BBand", color = upperHtfColor, display = displaySet)
p2Htf = plot(displayHtf ? lowerHtf : na, "Lower BBand", color = lowerHtfColor, display = displaySet)
p1Ltf = plot(displayVwapLtf and showBbLtf ? upperLtf : na, color = upperLtfColor, display = displaySet)
p2Ltf = plot(displayVwapLtf and showBbLtf ? lowerLtf : na, color = lowerLtfColor, display = displaySet)

// VWAP ---------------------------------
// If it's a short day, then there could be no daily bar. Take a previous one.
if na(dwmBarTime)
    dwmBarTime := nz(dwmBarTime[1])
var periodStartD = time - time // zero
var periodStartW = time - time // zero
var periodStartM = time - time // zero
var periodStartY = time - time // zero

makeMondayZero(dayOfWeek) => (dayOfWeek + 5) % 7

isMidnight(t) =>
    hour(t) == 0 and minute(t) == 0

isSameDay(t1, t2) =>
    dayofmonth(t1) == dayofmonth(t2) and
  month(t1) == month(t2) and
  year(t1) == year(t2)

tradingDayStart(t) =>
    y = year(t)
    m = month(t)
    d = dayofmonth(t)
    timestamp(y, m, d, 0, 0, 0)

numDaysBetween(time1, time2) =>
    y1 = year(time1)
    m1 = month(time1)
    d1 = dayofmonth(time1)
    
    y2 = year(time2)
    m2 = month(time2)
    d2 = dayofmonth(time2)
    
    diff = math.abs(timestamp("GMT", y1, m1, d1, 0, 0) - timestamp("GMT", y2, m2, d2, 0, 0))
    diff / MILLIS_IN_DAY

tradingDay = tradingDayStart(dwmBarTime)

isNewDPeriod() =>
    isNew = false
    if tradingDay != nz(tradingDay[1])
        isNew := na(tradingDay[1]) or tradingDay >= tradingDay[1]
    
    isNew

isNewWPeriod() =>
    isNew = false
    if tradingDay != nz(tradingDay[1])
        DAYS_IN_WEEK = 7
        isNew := makeMondayZero(dayofweek(periodStartW)) + numDaysBetween(periodStartW, tradingDay) >= DAYS_IN_WEEK
            
    isNew

isNewMPeriod() =>
    isNew = false
    if tradingDay != nz(tradingDay[1])
        isNew := month(periodStartM) != month(tradingDay) or year(periodStartM) != year(tradingDay)
            
    isNew

isNewYPeriod() =>
    isNew = false
    if tradingDay != nz(tradingDay[1])
        isNew := year(periodStartY) != year(tradingDay) or year(periodStartY) != year(tradingDay)
            
    isNew

sumSrcD = float(na)
sumVolD = float(na)
sumSrcD := nz(sumSrcD[1], 0)
sumVolD := nz(sumVolD[1], 0)

sumSrcW = float(na)
sumVolW = float(na)
sumSrcW := nz(sumSrcW[1], 0)
sumVolW := nz(sumVolW[1], 0)

sumSrcM = float(na)
sumVolM = float(na)
sumSrcM := nz(sumSrcM[1], 0)
sumVolM := nz(sumVolM[1], 0)

sumSrcY = float(na)
sumVolY = float(na)
sumSrcY := nz(sumSrcY[1], 0)
sumVolY := nz(sumVolY[1], 0)

if isNewDPeriod()
    periodStartD := tradingDay
    sumSrcD := 0.0
    sumVolD := 0.0

if isNewWPeriod()
    periodStartW := tradingDay
    sumSrcW := 0.0
    sumVolW := 0.0

if isNewMPeriod()
    periodStartM := tradingDay
    sumSrcM := 0.0
    sumVolM := 0.0

if isNewYPeriod()
    periodStartY := tradingDay
    sumSrcY := 0.0
    sumVolY := 0.0    

if not na(hlc3) and not na(volume)
    sumSrcD := sumSrcD + hlc3 * volume
    sumVolD := sumVolD + volume

if not na(hlc3) and not na(volume)
    sumSrcW := sumSrcW + hlc3 * volume
    sumVolW := sumVolW + volume

if not na(hlc3) and not na(volume)
    sumSrcM := sumSrcM + hlc3 * volume
    sumVolM := sumVolM + volume

if not na(hlc3) and not na(volume)
    sumSrcY := sumSrcY + hlc3 * volume
    sumVolY := sumVolY + volume    

dVwapValue = sumSrcD / sumVolD
wVwapValue = sumSrcW / sumVolW
mVwapValue = sumSrcM / sumVolM
yVwapValue = sumSrcY / sumVolY
plot(dVwapValue, title="D VWAP", style = plot.style_circles, linewidth = 2, color=dvColor, display = displaySet)
plot(wVwapValue, title="W VWAP", style = plot.style_circles, color=wvColor, linewidth = 2, display = displaySet)
plot(mVwapValue, title="M VWAP", style = plot.style_circles, color=mVwapColor, display = displaySet)
plot(yVwapValue, title="Y VWAP", style = plot.style_circles, color=yVwapColor, display = displaySet)

// DWM PRICE LEVELS --------------------------
daily_High_Line     = line.new(time, _dH, time + 1, _dH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = dLevelColor, style = line.style_dotted, width = dwmLineWidth)
line.delete(daily_High_Line[1])
daily_Low_Line      = line.new(time, _dL, time + 1, _dL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = dLevelColor, style = line.style_dotted, width = dwmLineWidth)
line.delete(daily_Low_Line[1])
daily_Close_Line    = line.new(time, showDwmClose ? _dC : na, time + 1, _dC, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = dLevelColor, style = line.style_dotted, width = dwmLineWidth)
line.delete(daily_Close_Line[1])

weekly_High_Line    = line.new(time, _wH, time + 1, _wH, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = wLevelColor, style = line.style_dotted, width = dwmLineWidth)
line.delete(weekly_High_Line[1])
weekly_Low_Line     = line.new(time, _wL, time + 1, _wL, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = wLevelColor, style = line.style_dotted, width = dwmLineWidth)
line.delete(weekly_Low_Line[1])
weekly_Close_Line   = line.new(time, showDwmClose ? _wC : na,  time + 1, _wC,  xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = wLevelColor, style = line.style_dotted, width = dwmLineWidth)
line.delete(weekly_Close_Line[1])

monthly_High_Line   = line.new(time, _mH,  time + 1, _mH,  xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = mLevelColor, style = line.style_dotted, width = dwmLineWidth)
line.delete(monthly_High_Line[1])
monthly_Low_Line    = line.new(time, _mL,   time + 1, _mL,   xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = mLevelColor, style = line.style_dotted, width = dwmLineWidth)
line.delete(monthly_Low_Line[1])
monthly_Close_Line  = line.new(time, showDwmClose ? _mC : na, time + 1, _mC, xloc = xloc.bar_time, extend = extendLines ? extend.both : extend.right, color = mLevelColor, style = line.style_dotted, width = dwmLineWidth)
line.delete(monthly_Close_Line[1])

label_daily_High    = label.new(bar_index, _dH, text = dBlank + "Prev D High : " + str.tostring(_dH, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = d_Line_Color, size = size.small, textalign = text.align_center)
label.delete(label_daily_High[1])
label_daily_Low     = label.new(bar_index, _dL, text = dBlank + "Prev D Low : "  +  str.tostring(_dL, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = d_Line_Color, size = size.small, textalign = text.align_center)
label.delete(label_daily_Low[1])
label_daily_Close   = label.new(bar_index, showDwmClose ? _dC : na,   text = dBlank + "Prev D Close : " +  str.tostring(_dC, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = d_Line_Color, size = size.small, textalign = text.align_center)
label.delete(label_daily_Close[1])

label_weekly_High   = label.new(bar_index, _wH, text = wBlank + "Prev W High : " + str.tostring(_wH, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = w_Line_Color, size = size.small, textalign = text.align_center)
label.delete(label_weekly_High[1])
label_weekly_Low    = label.new(bar_index, _wL, text = wBlank + "Prev W Low : "  + str.tostring(_wL, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = w_Line_Color, size = size.small, textalign = text.align_center)
label.delete(label_weekly_Low[1])
label_weekly_Close  = label.new(bar_index, showDwmClose ? _wC : na,  text = wBlank + "Prev W Close : " + str.tostring(_wC, format.mintick), color = color.new(color.black, 100), style = label.style_label_left, textcolor = w_Line_Color, size = size.small, textalign = text.align_center)
label.delete(label_weekly_Close[1])

label_monthly_High  = label.new(bar_index, _mH, text = mBlank + "Prev M High : " + str.tostring(_mH, format.mintick) + "\n", color = color.new(color.black, 100), style = label.style_label_left, textcolor = m_Line_Color, size = size.small, textalign = text.align_center)
label.delete(label_monthly_High[1])
label_monthly_Low   = label.new(bar_index, _mL, text = mBlank + "Prev M Low : "  + str.tostring(_mL, format.mintick) + "\n", color = color.new(color.black, 100), style = label.style_label_left, textcolor = m_Line_Color, size = size.small, textalign = text.align_center)
label.delete(label_monthly_Low[1])
label_monthly_Close = label.new(bar_index, showDwmClose ? _mC : na, text = mBlank + "Prev M Close : " + str.tostring(_mC, format.mintick) + "\n", color = color.new(color.black, 100), style = label.style_label_left, textcolor = m_Line_Color, size = size.small, textalign = text.align_center)
label.delete(label_monthly_Close[1])